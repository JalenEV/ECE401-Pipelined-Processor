import m5
from m5.objects import *
import os

# Create the system object
system = System()

# Set up the clock domain
system.clk_domain = SrcClockDomain()
system.clk_domain.clock = "1GHz"
system.clk_domain.voltage_domain = VoltageDomain()

# Set the memory mode and address range
system.mem_mode = "timing"
system.mem_ranges = [AddrRange("8192MB")]

# Define L1 Instruction and Data Caches
class L1ICache(Cache):
    assoc = 2
    tag_latency = 1
    data_latency = 1
    response_latency = 1
    mshrs = 4
    size = '16kB'
    tgts_per_mshr = 20

class L1DCache(Cache):
    assoc = 2
    tag_latency = 1
    data_latency = 1
    response_latency = 1
    mshrs = 4
    size = '16kB'
    tgts_per_mshr = 20

# Define L2 Cache
class L2Cache(Cache):
    assoc = 8
    tag_latency = 10
    data_latency = 10
    response_latency = 10
    mshrs = 16
    tgts_per_mshr = 20
    size = '256kB'

# Define a custom DRAM controller for memory tuning
class TunedDDR3(DDR3_1600_8x8):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.tRAS = '35ns'  # Row active time
        self.tRCD = '10ns'  # Row to column delay
        self.tRP = '10ns'   # Row precharge time
        self.tRFC = '260ns' # Refresh cycle time

class TunedMemCtrl(MemCtrl):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.dram = TunedDDR3()  # Use the custom DDR3 model

# Set up the CPU
system.cpu = O3CPU()  # Switching to O3CPU to support pipeline and branch prediction
system.cpu.icache = L1ICache()  # Assign the L1 Instruction cache
system.cpu.dcache = L1DCache()  # Assign the L1 Data cache

# Create the memory bus
system.membus = SystemXBar()

# Add a crossbar for L2 cache
system.l2xbar = SystemXBar()

# Add L2 Cache
system.l2cache = L2Cache()

# Connect L1 caches to L2 crossbar
system.cpu.icache.mem_side = system.l2xbar.cpu_side_ports
system.cpu.dcache.mem_side = system.l2xbar.cpu_side_ports

# Connect L2 crossbar to L2 cache
system.l2xbar.mem_side_ports = system.l2cache.cpu_side

# Connect L2 cache to the memory bus
system.l2cache.mem_side = system.membus.cpu_side_ports

# Connect the CPU's instruction and data ports to the memory bus
system.cpu.icache_port = system.cpu.icache.cpu_side
system.cpu.dcache_port = system.cpu.dcache.cpu_side

# Create the interrupt controller for the CPU
system.cpu.createInterruptController()

# Set up the memory controller and DRAM
system.mem_ctrl = TunedMemCtrl()
system.mem_ctrl.dram.range = system.mem_ranges[0]
system.mem_ctrl.port = system.membus.mem_side_ports

# Connect the system port to the memory bus
system.system_port = system.membus.cpu_side_ports

# Define a simple branch predictor
class BranchPredictor:
    def __init__(self):
        self.history = {}

    def predict(self, pc):
        print(f"Predicting branch outcome for PC: {pc}")
        return self.history.get(pc, True)  # Default to always taken

    def update(self, pc, taken):
        print(f"Updating branch prediction for PC: {pc} with outcome: {taken}")
        self.history[pc] = taken

branch_predictor = BranchPredictor()

# Define bypass/forwarding logic
class Pipeline:
    def handle_data_hazard(self, src, dest):
        print(f"Data hazard detected: Forwarding from {src} to {dest}")
        return True

pipeline = Pipeline()

# Simulate a test scenario
src_reg = "r1"
dest_reg = "r1"
if pipeline.handle_data_hazard(src_reg, dest_reg):
    print("Bypassing resolved the hazard")

pc = 0x1000
if branch_predictor.predict(pc):
    print(f"Branch predicted as taken for PC: {pc}")
branch_predictor.update(pc, True)  # Simulate a branch outcome

# Set up the binary to run
thispath = os.path.dirname(os.path.realpath(__file__))
binary = os.path.join(
    thispath,
    "../../../",
    "tests/test-progs/hello/bin/riscv/linux/hello",
)

# Set up the workload
system.workload = SEWorkload.init_compatible(binary)

# Create a process to represent the workload
process = Process()
process.cmd = [binary]
system.cpu.workload = process
system.cpu.createThreads()

# Set up the root and instantiate the system
root = Root(full_system=False, system=system)
m5.instantiate()

print("Beginning simulation!")
exit_event = m5.simulate()
print("Exiting @ tick %i because %s" % (m5.curTick(), exit_event.getCause()))

print("Simulation complete. Dumping stats...")
m5.stats.dump()